service: deleteOldGuidPartitions

custom:
  project: dataplattform
  stage: ${opt:stage, self:provider.stage}
  service: ${self:custom.stage}-${self:service}
  editable:
    timeout: 28
    scheduleRate: rate(7 days)
    description: guid partitions checked and deleted if outdated

  pythonRequirements:
    dockerizePip: non-linux
    noDeploy:
      - boto3 # Default in lambda rt
      - botocore
      - pandas # Layer
      - pytz
      - numpy
      - numpy.libs
      - fastparquet
      - numba
      - llvmlite

provider:
  name: aws
  stage: dev
  region: eu-central-1
  stackName: ${self:custom.service}
  deploymentBucket: #provide a bucket name to where serverless assets should to be uploaded
    name: dataplattform-v2-deploymentbucket
  runtime: python3.7
  memorySize: 1024
  timeout: ${self:custom.editable.timeout}

  tags:
    project: dataplattform
    layer: infrastructure
  stackTags: #sets CloudFormation stack tags
    project: dataplattform
    layer: infrastructure

package:
  individually: True
  exclude:
    - "./**"

functions:
  function:
    handler: delete_old_guid_partitions.handler
    name: ${self:custom.stage}-${self:service}-function
    description: Removes GUID partitions that no longer exists in DynamoDB
    role: !GetAtt GUIDUpdaterRole.Arn
    package:
      include:
        - "delete_old_guid_partitions.py"
    environment:
      STAGE: ${self:custom.stage}
      SERVICE: ${self:service}
      DATALAKE: !ImportValue ${self:custom.stage}-datalakeName
    events:
      - schedule:
        name: $s{self:custom.stage}-${self:service}-timer
        description: ${self:custom.editable.description}
        rate: ${self:custom.editable.scheduleRate}
        enabled: false

resources:
  Resources:

    GUIDUpdaterRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-guid-updater-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - !ImportValue ${self:custom.stage}-personal-metadata-table-access-policy
        Policies:
          - PolicyName: ${self:custom.stage}-Glue-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "glue:GetDatabase"
                    - "glue:GetDatabases"
                    - "glue:GetTable"
                    - "glue:GetTables"
                    - "glue:GetPartition"
                    - "glue:GetPartitions"
                    - "glue:BatchDeletePartition"
                  Resource:
                    - !Sub "arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:catalog"
                    - !Sub "arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:database/${self:custom.stage}_*_database"
                    - !Sub "arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.stage}_*_database/*"

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
