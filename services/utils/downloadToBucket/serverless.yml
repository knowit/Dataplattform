service: downloadToBucket
frameworkVersion: '3'

dataplattform:
  dependencies:
    - ../../infrastructure/deploymentBucket
    - ../../infrastructure/storage

custom:
  editable:
    timeout: 900
    srcDir: lib/downloadtobucket
    handlerFile: download_to_bucket
    description: Downloads documents to a public raw storage bucket
  stage: ${opt:stage, self:provider.stage}
  pythonRequirements:
    dockerizePip: non-linux
    noDeploy:
      - boto3
      - botocore

provider:
  name: aws
  stage: dev
  region: eu-central-1
  stackName: ${self:custom.stage}-${self:service}
  deploymentBucket:
    name: ${self:custom.stage}-${file(../../infrastructure/deploymentBucket/config.yml):bucketName, file(../../infrastructure/deploymentBucket/serverless.yml):defaultBucketName}
  runtime: python3.7
  memorySize: 1024
  timeout: ${self:custom.editable.timeout}
package:
  individually: true
  exclude:
    - "./**"

functions:
  downloadToBucket:
    handler: ${self:custom.editable.srcDir}/${self:custom.editable.handlerFile}.handler
    name: ${self:custom.stage}-${self:service}
    description: ${self:custom.editable.description}
    role: !GetAtt S3Access.Arn
    package:
      include:
        - '${self:custom.editable.srcDir}/*.py'
    environment:
      PUBLIC_BUCKET: !ImportValue ${self:custom.stage}-publicBucketName

resources:
  Resources:
    S3Access:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-s3AccessRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: ${self:custom.stage}-PublicBucketIO-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:ListObjects*
                    - s3:GetObject
                    - s3:CopyObject
                    - s3:DeleteObjects
                  Resource:
                    - Fn::Join:
                        - ""
                        - - !ImportValue ${self:custom.stage}-publicBucketArn
                          - /*
  Outputs:
    DownloadToBucketLambdaFunctionArn:
      Export:
        Name: ${self:custom.stage}-${self:service}Arn

plugins:
  - serverless-python-requirements
  - serverless-function-outputs
