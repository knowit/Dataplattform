service: DataAPI
frameworkVersion: '3'

dataplattform:
  dependencies:
    - ../../infrastructure/deploymentBucket
    - ../../infrastructure/cognito
    - ../../infrastructure/datalake
    - ../../infrastructure/events
    - ../../infrastructure/monitoring
    - ../../infrastructure/glue

custom:
  project: dataplattform
  stage: ${opt:stage, self:provider.stage}
  service: ${self:custom.stage}-${self:service}
  wsgi:
    app: app.app
    packRequirements: false
    pythonBin: python
  pythonRequirements:
    dockerImage: public.ecr.aws/sam/build-python3.9
    dockerizePip: non-linux
    slim: true
    slimPatternsAppendDefaults: false
    slimPatterns:
      - '**/*.py[c|o]'
      - '**/__pycache__*'
    noDeploy:
      - boto3 # Default in lambda rt
      - botocore
  authorizer:
    type: COGNITO_USER_POOLS
    name: authorizer
    authorizerId: !Ref Authorizer
    scopes:
      - openid # TODO scopes

provider:
  name: aws
  stage: dev
  region: eu-central-1
  stackName: ${self:custom.stage}-${self:service}
  deploymentBucket:
    name: ${self:custom.stage}-${file(../../infrastructure/deploymentBucket/config.yml):bucketName, file(../../infrastructure/deploymentBucket/serverless.yml):defaultBucketName}
  runtime: python3.9
  memorySize: 1024
  timeout: 28

  tags:
    project: ${self:custom.project}
    layer: API
  stackTags:
    project: ${self:custom.project}
    layer: API
  logs:
    restApi: true
  tracing:
    apiGateway: true
    lambda: true

package:
  individually: true
  exclude:
    - "./**"

functions:
  DataAPI:
    handler: wsgi_handler.handler
    name: ${self:custom.service}
    description: Dataplattform Data API
    role: !ImportValue ${self:custom.stage}-assumeRole
    package:
      include:
        - 'app.py'
        - 'apis/**/*.py'
        - 'common_lib/**'
    environment:
      DATALAKE: !ImportValue ${self:custom.stage}-datalakeName
      STAGE: ${self:custom.stage}
      AUTHURL: auth.${ssm:/${self:custom.stage}/routes/domain_name}

      NEW_REPORT_TOPIC: !ImportValue ${self:custom.stage}-new-report-topic-arn
      DELETE_REPORT_TOPIC: !ImportValue ${self:custom.stage}-delete-report-topic-arn
      LEVEL_3_STAGING_DIR: !ImportValue ${self:custom.stage}-default-level-3-staging-dir
      LEVEL_2_STAGING_DIR: !ImportValue ${self:custom.stage}-default-level-2-staging-dir
      LEVEL_1_STAGING_DIR: !ImportValue ${self:custom.stage}-default-level-1-staging-dir
    events:
      - http:
          method: ANY
          path: /data/{proxy+}
          authorizer: ${self:custom.authorizer}
          cors: true
      - http:
          method: GET
          path: /catalogue/{proxy+}
          authorizer: ${self:custom.authorizer}
          cors: true
      - http:
          method: ANY
          path: /{proxy+}
          cors: true
      - http:
          method: ANY
          path: /
          cors: true
  CacheUpdater:
    handler: functions.cache_updater.handler
    name: ${self:custom.service}-CacheUpdater
    description: Dataplattform API Cache updater
    role: !GetAtt ReportCacheRole.Arn
    package:
      include:
        - 'functions/cache_updater.py'
        - 'functions/requirements.txt'
        - 'functions/__init__.py'
    # destinations: # TODO
    # onSuccess: xxx:xxx:target
    # onFailure: xxx:xxx:target
    environment:
      DATALAKE: !ImportValue ${self:custom.stage}-datalakeName
      LEVEL_3_STAGING_DIR: !ImportValue ${self:custom.stage}-default-level-3-staging-dir
      LEVEL_2_STAGING_DIR: !ImportValue ${self:custom.stage}-default-level-2-staging-dir
      LEVEL_1_STAGING_DIR: !ImportValue ${self:custom.stage}-default-level-1-staging-dir
      STAGE: ${self:custom.stage}
    events:
      - sns:
          arn: !ImportValue ${self:custom.stage}-new-report-topic-arn
          topicName: ${self:custom.stage}-NewReport
      - sns:
          arn: !ImportValue ${self:custom.stage}-data-update-topic-arn
          topicName: ${self:custom.stage}-DataUpdate

  CacheDeleter:
    handler: functions.cache_deleter.handler
    name: ${self:custom.service}-CacheDeleter
    description: Dataplattform API Cache deleter
    role: !GetAtt ReportCacheRole.Arn
    package:
      include:
        - 'functions/cache_deleter.py'
        - 'functions/requirements.txt'
        - 'functions/__init__.py'
    environment:
      DATALAKE: !ImportValue ${self:custom.stage}-datalakeName
      STAGE: ${self:custom.stage}
    events:
      - sns:
          arn: !ImportValue ${self:custom.stage}-delete-report-topic-arn
          topicName: ${self:custom.stage}-DeleteReport

resources:
  Resources:
    Authorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        IdentitySource: method.request.header.authorization
        Name: DataplattformDataAPIAuthorizer
        ProviderARNs:
          - !ImportValue ${self:custom.stage}-cognito-userPool
        RestApiId: !Ref ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
    ReportsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.stage}_reports_table
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 6
          WriteCapacityUnits: 1

    ReportCacheRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.service}-ReportCache-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - !ImportValue ${self:custom.stage}-lambda-xray-tracing
        Policies:
          - PolicyName: ${self:custom.service}-ReportCache-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:UpdateItem
                  Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.stage}_reports_table'
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:ListMultipartUploadParts
                    - s3:AbortMultipartUpload
                    - s3:DeleteObject
                  Resource:
                    Fn::Join:
                      - ""
                      - - !ImportValue ${self:custom.stage}-datalakeArn
                        - "/"
                        - !ImportValue ${self:custom.stage}-default-level-3-staging-dir
                        - "*"
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:ListMultipartUploadParts
                    - s3:AbortMultipartUpload
                    - s3:DeleteObject
                  Resource:
                    Fn::Join:
                      - ""
                      - - !ImportValue ${self:custom.stage}-datalakeArn
                        - "/"
                        - !ImportValue ${self:custom.stage}-default-level-2-staging-dir
                        - "*"
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:ListMultipartUploadParts
                    - s3:AbortMultipartUpload
                    - s3:DeleteObject
                  Resource:
                    Fn::Join:
                      - ""
                      - - !ImportValue ${self:custom.stage}-datalakeArn
                        - "/"
                        - !ImportValue ${self:custom.stage}-default-level-1-staging-dir
                        - "*"
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    Fn::Join:
                      - ""
                      - - !ImportValue ${self:custom.stage}-datalakeArn
                        - /reports/*
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    Fn::Join:
                      - ""
                      - - !ImportValue ${self:custom.stage}-datalakeArn
                        - /data/*
                - Effect: Allow
                  Action:
                    - s3:GetBucketLocation
                    - s3:ListBucket
                    - s3:ListBucketMultipartUploads
                  Resource:
                    - !ImportValue ${self:custom.stage}-datalakeArn
                - Effect: Allow
                  Action:
                    - athena:ListTableMetadata
                    - athena:ListDatabases
                  Resource: !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/AwsDataCatalog'
                - Effect: Allow
                  Action:
                    - athena:ListDataCatalogs
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - athena:StartQueryExecution
                    - athena:GetQueryExecution
                  Resource: !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/primary'
                - Effect: Allow
                  Action:
                    - glue:GetTable
                    - glue:GetDatabase
                    - glue:GetPartitions
                  Resource:
                    - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
                    - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${self:custom.stage}_*'
                    - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${self:custom.stage}_*'

  Outputs:
    ApiUrl:
      Value:
        Fn::Join:
          - ""
          - - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com"
      Export:
        Name: ${self:custom.stage}-DataAPI-Gateway-url

plugins:
  - serverless-python-requirements
  - serverless-plugin-scripts
  - serverless-wsgi
