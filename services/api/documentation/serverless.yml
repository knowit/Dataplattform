service: api-documentation

plugins:
  - serverless-pseudo-parameters

custom:
  stage: ${opt:stage, self:provider.stage}
  service: ${self:custom.stage}-${self:service}
  bucketName: ${self:custom.service}-staticweb-#{AWS::AccountId}
  distributionAlias:
    - ${ssm:/${self:custom.stage}/${self:service}/distributionAlias}
    - doc.${ssm:/${self:custom.stage}/${self:service}/distributionAlias}
  certificate: ${ssm:/${self:custom.stage}/USEA1/sslIdentifier}

provider:
  name: aws
  stage: dev
  region: eu-central-1
  runtime: nodejs12.x
  stackName: ${self:custom.service}
  timeout: 25
  deploymentBucket:
    name: ${self:custom.stage}-${file(../../infrastructure/deploymentBucket/config.yml):bucketName, file(../../infrastructure/deploymentBucket/serverless.yml):defaultBucketName}
  environment:
    CLIENTID: !ImportValue ${self:custom.stage}-cognito-userPoolClientId
    APIURL: ${ssm:/${self:custom.stage}/cloudfront-api-dist/distributionAlias

resources:
  Resources:
    StaticS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    docDNSRecord:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        DependsOn: Distribution
        HostedZoneId: !ImportValue ${self:custom.stage}-routes-zoneid
        RecordSets:
          - Name: doc.${ssm:/${self:custom.stage}/routes/domain_name}
            Type: A
            AliasTarget:
              DNSName:
                "Fn::GetAtt": [Distribution, DomainName]
              HostedZoneId: Z2FDTNDATAQYW2
          - Name: ${ssm:/${self:custom.stage}/routes/domain_name}
            Type: A
            AliasTarget:
              DNSName: doc.${ssm:/${self:custom.stage}/routes/domain_name}
              HostedZoneId: !ImportValue ${self:custom.stage}-routes-zoneid

    StaticS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.bucketName}/*

    Distribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Aliases: ${self:custom.distributionAlias}
          Origins:
            - DomainName: ${self:custom.bucketName}.s3-website.${self:provider.region}.amazonaws.com
              Id: ${self:custom.service}-default-origin
              CustomOriginConfig:
                HTTPPort: 80
                OriginProtocolPolicy: http-only
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            TargetOriginId: ${self:custom.service}-default-origin
            ForwardedValues:
              QueryString: false
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn:
              Fn::Join:
                - ":"
                - - "arn:aws:acm:us-east-1"
                  - !Ref "AWS::AccountId"
                  - ${self:custom.certificate}
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only

  Outputs:
    StaticBucketOutput:
      Value:
        "Ref": StaticS3Bucket
    DistributionOutput:
      Value:
        "Fn::GetAtt": [Distribution, DomainName]
    DistributionOutputUrl:
      Value:
        "Fn::GetAtt": [Distribution, DomainName]
      Export:
        Name: ${self:custom.stage}-api-documentation-url
