service: cloudfront-raw-storage
frameworkVersion: '3'

dataplattform:
  dependencies:
    - ../../infrastructure/deploymentBucket
    - ../../infrastructure/storage
    - ../../infrastructure/cognito
    - ../../infrastructure/routes

custom:
  stage: ${opt:stage, self:provider.stage}
  service: ${self:custom.stage}-${self:service}
  userPoolRegion: eu-central-1
  publicBucketName: ${cf:${self:custom.stage}-raw-storage-for-dataplattform.PublicRawStorageBucketName}
  S3PublicOriginAccessIdentity: ${cf:${self:custom.stage}-raw-storage-for-dataplattform.S3PublicOriginAccessIdentity}
  publicDomainName: ${self:custom.publicBucketName}.s3.amazonaws.com
  publicDomainId: custom/${self:custom.publicDomainName}
  publicFrontOrigin:
    DomainName: ${self:custom.publicDomainName}
    Id: ${self:custom.publicDomainId}
    S3OriginConfig:
      OriginAccessIdentity: origin-access-identity/cloudfront/${self:custom.S3PublicOriginAccessIdentity}

  userPoolId: ${cf:cognito-${self:custom.stage}.CognitoUserPoolId}
  scripts:
    hooks:
      "before:deploy:deploy": python preDeploy.py --region ${self:custom.userPoolRegion} --userpool_id ${self:custom.userPoolId}
  distributionAlias: storage.${ssm:/${self:custom.stage}/routes/domain_name}
  certificate: ${ssm:/${self:custom.stage}/USEA1/sslIdentifier}

package:
  individually: true
  exclude:
    - "./**" # Exclude everything and include what you need in the functions below

pythonRequirements:
  dockerizePip: non-linux
  noDeploy:
    - boto3 # Default in lambda rt
    - botocore

provider:
  name: aws
  region: eu-central-1
  stackName: ${self:custom.service}
  runtime: python3.7
  deploymentBucket:
    name: ${self:custom.stage}-${file(../deploymentBucket/config.yml):bucketName, file(../../infrastructure/deploymentBucket/serverless.yml):defaultBucketName}

resources:
  Resources:
    storageDNSRecord:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !ImportValue ${self:custom.stage}-routes-zoneid
        RecordSets:
          - Name: storage.${ssm:/${self:custom.stage}/routes/domain_name}
            Type: A
            AliasTarget:
              DNSName:
                "Fn::GetAtt": [CloudFrontDistribution, DomainName]
              HostedZoneId: Z2FDTNDATAQYW2

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.stage}-${self:custom.distributionAlias}
          Origins:
            - ${self:custom.publicFrontOrigin}
          DefaultCacheBehavior:
            AllowedMethods:
              - HEAD
              - GET
            ViewerProtocolPolicy: redirect-to-https
            TargetOriginId: ${self:custom.publicDomainId}
            ForwardedValues:
              QueryString: false
          DefaultRootObject: index.html
          Enabled: true
          ViewerCertificate:
            AcmCertificateArn:
              Fn::Join:
                - ":"
                - - "arn:aws:acm:us-east-1"
                  - !Ref "AWS::AccountId"
                  - ${self:custom.certificate}
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only

  Outputs:
    CloudFrontDistributionOutput:
      Value:
        "Fn::GetAtt": [CloudFrontDistribution, DomainName]
    CloudFrontDistributionId:
      Value:
        "Ref": CloudFrontDistribution

plugins:
  - serverless-python-requirements
  - serverless-plugin-scripts
