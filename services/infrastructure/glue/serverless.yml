service: glue
frameworkVersion: '3'

dataplattform:
  dependencies:
    - ../deploymentBucket
    - ../datalake
    - ../kms

custom:
  editable:
    databaseName: level_4
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  stage: dev
  region: eu-central-1
  stackName: ${self:service}-${self:custom.stage}
  deploymentBucket:
    name: ${self:custom.stage}-${file(../deploymentBucket/config.yml):bucketName, file(../deploymentBucket/serverless.yml):defaultBucketName}
  runtime: nodejs16.x

resources:
  Resources:
    # Level 1
    Level1GlueDatabase:
      Type: AWS::Glue::Database
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseInput:
          Name: ${self:custom.stage}_level_1_database
    Level1GlueAccess:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-level-1-glue-access
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - glue.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        Policies:
          - PolicyName: ${self:custom.stage}-DatalakeRead-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListObjects
                    - s3:GetObject
                  Resource:
                    - Fn::Join:
                        - ""
                        - - !ImportValue ${self:custom.stage}-datalakeArn
                          - /data/level-1*

    # Level 2
    Leve2GlueDatabase:
      Type: AWS::Glue::Database
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseInput:
          Name: ${self:custom.stage}_level_2_database
    Level2GlueAccess:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-level-2-glue-access
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - glue.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        Policies:
          - PolicyName: ${self:custom.stage}-DatalakeRead-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListObjects
                    - s3:GetObject
                  Resource:
                    - Fn::Join:
                        - ""
                        - - !ImportValue ${self:custom.stage}-datalakeArn
                          - /data/level-2*

    # Level 3
    Leve3GlueDatabase:
      Type: AWS::Glue::Database
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseInput:
          Name: ${self:custom.stage}_level_3_database
    Level3GlueAccess:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-level-3-glue-access
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - glue.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        Policies:
          - PolicyName: ${self:custom.stage}-DatalakeRead-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListObjects
                    - s3:GetObject
                  Resource:
                    - Fn::Join:
                        - ""
                        - - !ImportValue ${self:custom.stage}-datalakeArn
                          - /data/level-3*

    # Level 4
    Level4GlueDatabase:
      Type: AWS::Glue::Database
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseInput:
          Name: ${self:custom.stage}_level_4_database
    Level4GlueAccess:
      Type: AWS::IAM::Role
      Properties:
        RoleName: Level4GlueRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "glue.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${self:custom.stage}-Glue-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'glue:GetTable'
                    - 'glue:GetDatabase'
                    - 'glue:CreateDatabase'
                    - 'glue:CreateTable'
                    - 'glue:UpdateTable'
                    - 'glue:UpdatePartition'
                    - 'glue:BatchGetPartition'
                    - 'glue:BatchCreatePartition'
                  Resource:
                    - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
                    - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${self:custom.stage}_${self:custom.editable.databaseName}_database'
                    - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${self:custom.stage}_${self:custom.editable.databaseName}_database/*'
          - PolicyName: ${self:custom.stage}-GlueSecurity-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'glue:GetDataCatalogEncryptionSettings'
                    - 'glue:PutDataCatalogEncryptionSettings'
                    - 'glue:CreateSecurityConfiguration'
                    - 'glue:GetSecurityConfiguration'
                    - 'glue:GetSecurityConfigurations'
                    - 'glue:DeleteSecurityConfiguration'
                  Resource: '*'
          - PolicyName: ${self:custom.stage}-Logs-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                    - 'logs:AssociateKmsKey'
                  Resource:
                    - !Sub 'arn:aws:logs:*:*:/aws-glue/*'
          - PolicyName: ${self:custom.stage}-EncryptedBucketIO-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListObjects*
                    - s3:ListBucket
                    - s3:GetObject
                    - s3:CopyObject
                    - s3:PutObject
                  Resource:
                    - !Sub arn:aws:s3:::${self:custom.stage}-kmsbucket-${AWS::AccountId}
                    - !Sub arn:aws:s3:::${self:custom.stage}-kmsbucket-${AWS::AccountId}/*

  Outputs:
    Level1GlueAccessOutput:
      Value: !GetAtt Level1GlueAccess.Arn
      Export:
        Name: ${self:custom.stage}-level-1-glue-access
    Level2GlueAccessOutput:
      Value: !GetAtt Level2GlueAccess.Arn
      Export:
        Name: ${self:custom.stage}-level-2-glue-access
    Level3GlueAccessOutput:
      Value: !GetAtt Level3GlueAccess.Arn
      Export:
        Name: ${self:custom.stage}-level-3-glue-access
    Level4GlueAccessOutput:
      Value: !GetAtt Level4GlueAccess.Arn
      Export:
        Name: ${self:custom.stage}-level-4-glue-access
