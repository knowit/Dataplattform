service: cognito
frameworkVersion: '3'

dataplattform:
  dependencies:
    - ../deploymentBucket
    - ../monitoring

plugins:
  - serverless-plugin-scripts

custom:
  stage: ${sls:stage} # Keep for parsing in policies.js
  policies: ${file(./policies.js)}
  ssmParamName: /${sls:stage}/${self:service}/UserPoolClientId
  editable:
    configureDescription: "Perform necessary post-deployment configurations for cognito to function properly."
  scripts:
    hooks:
      before:deploy:deploy: pip install -r requirements-postDeploy.txt
      after:deploy:finalize: python postDeploy.py --stack-name ${self:provider.stackName} --param-name ${self:custom.ssmParamName} --region ${self:provider.region}

provider:
  name: aws
  stage: dev
  region: eu-central-1
  runtime: python3.9
  deploymentBucket:
    name: ${sls:stage}-${file(../deploymentBucket/config.yml):bucketName, file(../deploymentBucket/serverless.yml):defaultBucketName}
  stackName: ${self:service}-${sls:stage}
  tracing:
    lambda: true
  versionFunctions: false

package:
  individually: true
  exclude:
    - "./**"

functions:
  migrate_user:
    handler: assign_group_to_new_users_lambda.migrate_user
    environment:
      STAGE: ${sls:stage}
      SERVICE: ${self:service}
      USER_POOL_ID: !Ref CognitoUserPool
    name: ${self:service}-${sls:stage}-migrate_user
    description: Automatically assign new users to level 1 group
    role: !GetAtt GroupManagementRole.Arn
    package:
      include:
        - '*.py'
    events:
      - cognitoUserPool:
          pool: ${sls:stage}-dataplattform-user-pool
          trigger: PostConfirmation
          existing: true


resources:
  Resources:
    GroupManagementRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: GroupManagementRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - !ImportValue ${sls:stage}-lambda-xray-tracing
        Policies:
          - PolicyName: ${sls:stage}-GroupManagement-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: cognito-idp:AdminAddUserToGroup
                  Resource: !GetAtt CognitoUserPool.Arn

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${sls:stage}-dataplattform-user-pool
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
          UnusedAccountValidityDays: 7
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${sls:stage}-dataplattform-user-pool-client
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: !Ref CognitoUserPool
        Domain: !Sub '${sls:stage}-dataplattform-userpooldomain-${AWS::AccountId}'

    CognitoUserPoolGroupLevel1:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: level-1 access
        GroupName: level1
        RoleArn: !GetAtt Level1.Arn
        UserPoolId: !Ref CognitoUserPool

    CognitoUserPoolGroupLevel2:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: level-2 access
        GroupName: level2
        RoleArn: !GetAtt Level2.Arn
        UserPoolId: !Ref CognitoUserPool
    CognitoUserPoolGroupLevel3:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: level-3 access
        GroupName: level3
        RoleArn: !GetAtt Level3.Arn
        UserPoolId: !Ref CognitoUserPool

    AssumeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${sls:stage}-${self:service}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - !ImportValue ${sls:stage}-lambda-xray-tracing
        Policies:
          - PolicyName: CanAssumeRole
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'sts:AssumeRole'
                  Resource: "*"
          - PolicyName: CanListCognitoGroups
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'cognito-idp:GetGroup'
                  Resource: !GetAtt CognitoUserPool.Arn

    Level1:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${sls:stage}-${self:service}-level1
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
                AWS: !GetAtt AssumeRole.Arn
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies: ${self:custom.policies.level1}
    Level2:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${sls:stage}-${self:service}-level2
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
                AWS: !GetAtt AssumeRole.Arn
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies: ${self:custom.policies.level2}
    Level3:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${sls:stage}-${self:service}-level3
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
                AWS: !GetAtt AssumeRole.Arn
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies: ${self:custom.policies.level3}

  Outputs:
    CognitoUserPoolOutput:
      Value: !GetAtt CognitoUserPool.Arn
      Export:
        Name: ${sls:stage}-cognito-userPool
    AssumeRoleOutput:
      Value: !GetAtt AssumeRole.Arn
      Export:
        Name: ${sls:stage}-assumeRole
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
      Export:
        Name: ${sls:stage}-cognito-userPoolId
    CognitoUserPoolClientId:
      Value: !Ref CognitoUserPoolClient
      Export:
        Name: ${sls:stage}-cognito-userPoolClientId
