service: cognito

custom:
  stage: ${opt:stage, self:provider.stage}
  policies: ${file(./policies.js)}

provider:
  name: aws
  stage: dev
  region: eu-central-1
  deploymentBucket:
    name: ${self:custom.stage}-dataplattform-v2-deploymentbucket

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.stage}-dataplattform-user-pool
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
          UnusedAccountValidityDays: 7
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.stage}-dataplattform-user-pool-client
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: !Ref CognitoUserPool
        Domain: ${self:custom.stage}-dataplattform-users

    CognitoUserPoolGroupLevel1:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: level-1 access
        GroupName: level1
        RoleArn: !GetAtt Level1.Arn
        UserPoolId: !Ref CognitoUserPool

    CognitoUserPoolGroupLevel2:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: level-2 access
        GroupName: level2
        RoleArn: !GetAtt Level2.Arn
        UserPoolId: !Ref CognitoUserPool
    CognitoUserPoolGroupLevel3:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: level-3 access
        GroupName: level3
        RoleArn: !GetAtt Level3.Arn
        UserPoolId: !Ref CognitoUserPool

    AssumeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - !ImportValue ${self:custom.stage}-lambda-xray-tracing
        Policies:
          - PolicyName: CanAssumeRole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "sts:AssumeRole"
                  Resource: "*"
          - PolicyName: CanListCognitoGroups
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "cognito-idp:GetGroup"
                  Resource: !GetAtt CognitoUserPool.Arn

    Level1:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-level1
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
                AWS: !GetAtt AssumeRole.Arn
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies: ${self:custom.policies.level1}
    Level2:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-level2
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
                AWS: !GetAtt AssumeRole.Arn
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies: ${self:custom.policies.level2}
    Level3:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-level3
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
                AWS: !GetAtt AssumeRole.Arn
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies: ${self:custom.policies.level3}

  Outputs:
    CognitoUserPoolOutput:
      Value: !GetAtt CognitoUserPool.Arn
      Export:
        Name: ${self:custom.stage}-cognito-userPool
    AssumeRoleOutput:
      Value: !GetAtt AssumeRole.Arn
      Export:
        Name: ${self:custom.stage}-assumeRole
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
      Export:
        Name: ${self:custom.stage}-cognito-userPoolId
