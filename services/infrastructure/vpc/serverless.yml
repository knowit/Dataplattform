service: vpc
frameworkVersion: '3'

dataplattform:
  dependencies:
    - ../deploymentBucket

custom:
  project: dataplattform
  stage: ${opt:stage, self:provider.stage}
  service: ${self:custom.stage}-${self:service}
  VpcCIDR:
    dev: 10.194.0.0/18
    pre-prod: 10.194.128.0/18
    prod: 10.194.192.0/18
  PrivateSubnet1CIDR:
    dev: 10.194.0.0/24
    pre-prod: 10.194.128.0/24
    prod: 10.194.192.0/24
  PrivateSubnet2CIDR:
    dev: 10.194.1.0/24
    pre-prod: 10.194.129.0/24
    prod: 10.194.193.0/24
  PublicSubnet1CIDR:
    dev: 10.194.2.0/24
    pre-prod: 10.194.130.0/24
    prod: 10.194.194.0/24
  PublicSubnet2CIDR:
    dev: 10.194.3.0/24
    pre-prod: 10.194.131.0/24
    prod: 10.194.195.0/24

  PersonalMetadataTable: !Sub 'arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.stage}_personal_metadata_table'

provider:
  name: aws
  region: eu-central-1
  stackName: ${self:custom.service}
  deploymentBucket:
    name: ${self:custom.stage}-${file(../deploymentBucket/config.yml):bucketName, file(../deploymentBucket/serverless.yml):defaultBucketName}
  runtime: nodejs16.x

resources:
  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: ${self:custom.VpcCIDR.${self:custom.stage}}
        EnableDnsHostnames: true
        EnableDnsSupport: true
        InstanceTenancy: default
        Tags:
          - Key: Name
            Value: ${self:service}-${self:custom.project}-${self:custom.stage}

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:custom.stage}-${self:custom.project}-igw

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select [0, !GetAZs ""]
        CidrBlock: ${self:custom.PublicSubnet1CIDR.${self:custom.stage}}
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:custom.stage}-public-subnet-1
        VpcId: !Ref VPC

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select [1, !GetAZs ""]
        CidrBlock: ${self:custom.PublicSubnet2CIDR.${self:custom.stage}}
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:custom.stage}-public-subnet-2
        VpcId: !Ref VPC

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        Tags:
          - Key: Name
            Value: ${self:custom.stage}-public-route-table
        VpcId: !Ref VPC

    PublicRoute:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
        RouteTableId: !Ref PublicRouteTable

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select [0, !GetAZs ""]
        CidrBlock: ${self:custom.PrivateSubnet1CIDR.${self:custom.stage}}
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: ${self:custom.stage}-private-subnet-1
        VpcId: !Ref VPC

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select [1, !GetAZs ""]
        CidrBlock: ${self:custom.PrivateSubnet2CIDR.${self:custom.stage}}
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: ${self:custom.stage}-private-subnet-2
        VpcId: !Ref VPC

    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        Tags:
          - Key: Name
            Value: ${self:custom.stage}-private-route-table
        VpcId: !Ref VPC

    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        SubnetId: !Ref PrivateSubnet1

    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        SubnetId: !Ref PrivateSubnet2

    PublicSubnetSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allows inbound traffic from the public subnets.
        SecurityGroupIngress:
          - IpProtocol: -1
            CidrIp: ${self:custom.PublicSubnet1CIDR.${self:custom.stage}}
          - IpProtocol: -1
            CidrIp: ${self:custom.PublicSubnet2CIDR.${self:custom.stage}}
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ${self:custom.stage}-public-subnet-default-sg
        VpcId: !Ref VPC

    PrivateSubnetSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allows inbound traffic from the private subnets.
        SecurityGroupIngress:
          - IpProtocol: -1
            CidrIp: ${self:custom.PrivateSubnet1CIDR.${self:custom.stage}}
          - IpProtocol: -1
            CidrIp: ${self:custom.PrivateSubnet2CIDR.${self:custom.stage}}
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ${self:custom.stage}-private-subnet-default-sg
        VpcId: !Ref VPC

    VPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        PrivateDnsEnabled: false
        RouteTableIds:
          - !Ref PrivateRouteTable
        ServiceName: !Sub com.amazonaws.${self:provider.region}.dynamodb
        VpcId: !Ref VPC
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - "dynamodb:Batch*"
                - "dynamodb:Delete*"
                - "dynamodb:DescribeTable"
                - "dynamodb:GetItem"
                - "dynamodb:PutItem"
                - "dynamodb:Update*"
                - "dynamodb:Scan"
              Resource:
                - "${self:custom.PersonalMetadataTable}"

    VPCEndpointSSM:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - "*"
              Resource:
                - "*"
        PrivateDnsEnabled: false
        SecurityGroupIds:
          - !Ref PrivateSubnetSecurityGroup
        ServiceName: !Sub 'com.amazonaws.${self:provider.region}.ssm'
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        VpcEndpointType: Interface
        VpcId: !Ref VPC

  Outputs:
    VPC:
      Description: VPC ID
      Export:
        Name: !Sub ${AWS::StackName}-VPC
      Value: !Ref VPC

    PublicSubnet1:
      Description: PublicSubnet1 ID
      Export:
        Name: !Sub ${AWS::StackName}-public-subnet-1
      Value: !Ref PublicSubnet1

    PublicSubnet2:
      Description: PublicSubnet2 ID
      Export:
        Name: !Sub ${AWS::StackName}-public-subnet-2
      Value: !Ref PublicSubnet2

    PrivateSubnet1:
      Description: PrivateSubnet1 ID
      Export:
        Name: !Sub ${AWS::StackName}-private-subnet-1
      Value: !Ref PrivateSubnet1

    PrivateSubnet2:
      Description: PrivateSubnet2 ID
      Export:
        Name: !Sub ${AWS::StackName}-private-subnet-2
      Value: !Ref PrivateSubnet2

    PrivateSubnetSecurityGroup:
      Description: PrivateSubnetSecurityGroup ID
      Export:
        Name: !Sub ${AWS::StackName}-private-subnet-default-sg
      Value: !Ref PrivateSubnetSecurityGroup

    PublicSubnetSecurityGroup:
      Description: PublicSubnetSecurityGroup ID
      Export:
        Name: !Sub ${AWS::StackName}-public-subnet-default-sg
      Value: !Ref PublicSubnetSecurityGroup
