service: activeDirectory
frameworkVersion: '3'

dataplattform:
  dependencies:
    - ../../infrastructure/deploymentBucket
    - ../../infrastructure/vpc
    - ../../infrastructure/metadata
    - ../../infrastructure/monitoring

custom:
  editable:
    timeout: 60
    srcDir: lib/activeDirectory
    ingestHandlerFile: active_directory_ingest_lambda
    databaseName: level_3
    description: Active directory output is saved to encrypted dynamoDB table
    scheduleRate: rate(7 days)
    mockIngestHandlerFile: active_directory_ingest_mock_lambda
    mockDescription: Mock data for the DynamoDB table named personal_metadata_table
    mockRate: rate(30 days)
  mockEnabled:
    prod: false
    dev: true
  ingestEnabled:
    prod: true
    dev: false

  stage: ${opt:stage, self:provider.stage}
  pythonRequirements:
    dockerizePip: non-linux
    noDeploy:
      - boto3 # Default in lambda rt
      - botocore

provider:
  name: aws
  stage: dev
  region: eu-central-1
  stackName: ${self:custom.stage}-${self:service}
  deploymentBucket:
    name: ${self:custom.stage}-${file(../../infrastructure/deploymentBucket/config.yml):bucketName, file(../../infrastructure/deploymentBucket/serverless.yml):defaultBucketName}
  runtime: python3.9
  memorySize: 1024
  timeout: ${self:custom.editable.timeout}
  tags:
    Project: Dataplattform
    Layer: Ingestion
    Ingestion: Pollers
  environment:
  tracing:
    apiGateway: true
    lambda: true

package:
  individually: true
  exclude:
    - "./**"

functions:
  ingest:
    enabled: "${self:custom.ingestEnabled.${self:custom.stage}}"
    handler: ${self:custom.editable.srcDir}/${self:custom.editable.ingestHandlerFile}.handler
    name: ${self:custom.stage}-${self:service}-ingest
    description: ${self:custom.editable.description}
    role: !GetAtt IngestLambdaRole.Arn
    vpc:
      securityGroupIds:
        - !ImportValue ${self:custom.stage}-vpc-private-subnet-default-sg
      subnetIds:
        - !ImportValue ${self:custom.stage}-vpc-private-subnet-1
        - !ImportValue ${self:custom.stage}-vpc-private-subnet-2
    package:
      include:
        - "${self:custom.editable.srcDir}/*.py"
        - "*.json"
    environment:
      STAGE: ${self:custom.stage}
      SERVICE: ${self:service}
      PERSON_DATA_TABLE: !ImportValue ${self:custom.stage}-personal-metadata-table-name
    events:
      - schedule:
          name: ${self:custom.stage}-${self:service}-timer
          description: ${self:custom.editable.description}
          rate: ${self:custom.editable.scheduleRate}
          enabled: true

  mock:
    enabled: "${self:custom.mockEnabled.${self:custom.stage}}"
    handler: ${self:custom.editable.srcDir}/${self:custom.editable.mockIngestHandlerFile}.mock
    environment:
      STAGE: ${self:custom.stage}
    name: ${self:custom.stage}-${self:service}-mock
    description: ${self:custom.editable.mockDescription}
    role: !GetAtt MockLambdaRole.Arn
    vpc:
      securityGroupIds:
        - !ImportValue ${self:custom.stage}-vpc-private-subnet-default-sg
      subnetIds:
        - !ImportValue ${self:custom.stage}-vpc-private-subnet-1
        - !ImportValue ${self:custom.stage}-vpc-private-subnet-2
    package:
      include:
        - "${self:custom.editable.srcDir}/*.py"
    events:
      - schedule:
          name: ${self:custom.stage}-${self:service}-mock-timer
          description: ${self:custom.editable.mockDescription}
          rate: ${self:custom.editable.mockRate}
          enabled: true

resources:
  Resources:
    MockLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-mock-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
          - !ImportValue "${self:custom.stage}-personal-metadata-table-access-policy"

    IngestLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-${self:custom.editable.ingestHandlerFile}-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
          - !ImportValue "${self:custom.stage}-personal-metadata-table-access-policy"
          - !ImportValue ${self:custom.stage}-lambda-xray-tracing
        Policies:
          - PolicyName: ${self:custom.stage}-ParameterStore-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "ssm:GetParameter*"
                  Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:custom.stage}/${self:service}/*"

plugins:
  - serverless-python-requirements
  - serverless-plugin-conditional-functions
