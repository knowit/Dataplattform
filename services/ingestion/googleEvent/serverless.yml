service: googleEventPoller

dataplattform:
  dependencies:
    - ../../infrastructure/deploymentBucket
    - ../../infrastructure/layers/numpy
    - ../../infrastructure/layers/pandas
    - ../../infrastructure/layers/fastparquet
    - ../../infrastructure/datalake
    - ../../infrastructure/events
    - ../../infrastructure/monitoring
    - ../../infrastructure/glue

custom:
  editable:
    timeout: 12
    ingestHandlerFile: google_event_ingest_lambda
    processHandlerFile: google_event_process_lambda
    databaseName: level_2
    description: Fetch events from google calendar
    scheduleRate: rate(1 hour)
    accessLevel: level-2
    dataFolder: eventBox/events

  stage: ${opt:stage, self:provider.stage}
  accessPath: data/${self:custom.editable.accessLevel}/${self:custom.editable.dataFolder}/
  sqsQueueName: ${self:custom.stage}-${self:service}-sqs.fifo
  sqsQueueDLName: ${self:custom.stage}-${self:service}-sqs-dl.fifo
  pythonRequirements:
    dockerizePip: non-linux
    noDeploy:
      - boto3
      - botocore
      - pandas
      - pytz
      - numpy
      - numpy.libs
      - fastparquet
      - numba
      - llvmlite

provider:
  name: aws
  stage: dev
  region: eu-central-1
  stackName: ${self:custom.stage}-${self:service}
  deploymentBucket:
    name: |-
      ${self:custom.stage}-${file(../../infrastructure/deploymentBucket/config.yml)
      :bucketName, file(../../infrastructure/deploymentBucket/serverless.yml):defaultBucketName}
  runtime: python3.7
  memorySize: 1024
  timeout: ${self:custom.editable.timeout}
  tags:
    Project: Dataplattform
    Layer: Ingestion
    Ingestion: Pollers
  tracing:
    apiGateway: true
    lambda: true


package:
  individually: true
  exclude:
    - "./**"

functions:
  ingest:
    handler: ${self:custom.editable.ingestHandlerFile}.handler
    layers:
      - !ImportValue ${self:custom.stage}-numpyDepLayer-arn
      - !ImportValue ${self:custom.stage}-pandasDepLayer-arn
    name: ${self:custom.stage}-${self:service}-ingest
    description: ${self:custom.editable.description}
    role: !GetAtt IngestLambdaRole.Arn
    package:
      include:
        - '*.py'
    environment:
      STAGE: ${self:custom.stage}
      SERVICE: ${self:service}
      DATALAKE: !ImportValue ${self:custom.stage}-datalakeName
      ACCESS_PATH: ${self:custom.accessPath}
      DEFAULT_DATABASE: ${self:custom.editable.databaseName}
      SQS_QUEUE_NAME: ${self:custom.sqsQueueName}
      SQS_MESSAGE_GROUP_ID: ${self:custom.sqsQueueName}-group1

    events:
      - schedule:
          name: ${self:custom.stage}-${self:service}-timer
          description: ${self:custom.editable.description}
          rate: ${self:custom.editable.scheduleRate}
          enabled: true
  process:
    handler: ${self:custom.editable.processHandlerFile}.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - EventQueue
              - Arn
          batchSize: 1

    layers:
      - !ImportValue ${self:custom.stage}-fastparquetDepLayer-arn
      - !ImportValue ${self:custom.stage}-numpyDepLayer-arn
      - !ImportValue ${self:custom.stage}-pandasDepLayer-arn
    name: ${self:custom.stage}-${self:service}-process
    description: ${self:custom.editable.description}
    role: !GetAtt ProcessLambdaRole.Arn
    package:
      include:
        - '*.py'
    environment:
      STAGE: ${self:custom.stage}
      SERVICE: ${self:service}
      DATALAKE: !ImportValue ${self:custom.stage}-datalakeName
      ACCESS_PATH: ${self:custom.accessPath}
      DEFAULT_DATABASE: ${self:custom.editable.databaseName}
      DATA_UPDATE_TOPIC: !ImportValue ${self:custom.stage}-data-update-topic-arn
      ACCESS_LEVEL: ${self:custom.editable.accessLevel}

resources:
  Resources:
    IngestLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-${self:custom.editable.ingestHandlerFile}-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - !ImportValue ${self:custom.stage}-lambda-xray-tracing
        Policies:
          - PolicyName: ${self:custom.stage}-DatalakeIO-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:ListObjects*
                    - s3:GetObject
                    - s3:CopyObject
                    - s3:DeleteObjects
                  Resource:
                    - Fn::Join:
                        - ""
                        - - !ImportValue ${self:custom.stage}-datalakeArn
                          - /${self:custom.accessPath}*
          - PolicyName: ${self:custom.stage}-test-${self:service}-${self:custom.editable.ingestHandlerFile}-sqsRole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:GetQueueUrl
                    - sqs:SendMessageBatch
                    - sqs:SendMessage
                  Resource: !GetAtt EventQueue.Arn
          - PolicyName: ${self:custom.stage}-ParameterStore-${self:service}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'ssm:GetParameter*'
                    - 'ssm:PutParameter*'
                  Resource: !Sub 'arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.stage}/${self:service}/*'
    ProcessLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-${self:custom.editable.processHandlerFile}-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"
          - !ImportValue ${self:custom.stage}-process-lambda-topic-access-role
          - !ImportValue ${self:custom.stage}-lambda-xray-tracing
        Policies:
          - PolicyName: ${self:custom.stage}-DatalakeIO-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:ListObjects*
                    - s3:GetObject
                    - s3:CopyObject
                    - s3:DeleteObjects
                  Resource:
                    - Fn::Join:
                        - ""
                        - - !ImportValue ${self:custom.stage}-datalakeArn
                          - /${self:custom.accessPath}*
          - PolicyName: ${self:custom.stage}-DatalakeBucket-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:GetBucketLocation
                  Resource:
                    - Fn::Join:
                        - ""
                        - - !ImportValue ${self:custom.stage}-datalakeArn
                          - '*'
          - PolicyName: ${self:custom.stage}-glue-${self:service}-role
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - glue:GetCrawler
                    - glue:UpdateCrawler
                  Resource:
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:catalog'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:database/${self:custom.stage}_*'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.stage}_*'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:crawler/${self:custom.stage}_*'

    EventQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:custom.sqsQueueName}
        ContentBasedDeduplication: true
        VisibilityTimeout: ${self:custom.editable.timeout}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt EventQueueDL.Arn
          maxReceiveCount: 1

    EventQueueDL:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:custom.sqsQueueDLName}
        ContentBasedDeduplication: true


plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
