service: dora

dataplattform:
  dependencies:
    - ../../infrastructure/deploymentBucket
    - ../../infrastructure/datalake
    - ../../infrastructure/events
    - ../../infrastructure/monitoring
    - ../../infrastructure/glue
  glue:
    tableName: dora
    accessLevel: 2

custom:
  editable:
    timeout: 200
    handlerFile: dora_ingestion_handler
    processHandlerFile: dora_process_handler
    databaseName: level_4
    description: Fetch key metrics from github API
    scheduleRate: rate(1 day)
    accessLevel: level-4
    dataFolder: dora

  stage: ${opt:stage, self:provider.stage}
  accessPath: data/${self:custom.editable.accessLevel}/${self:custom.editable.dataFolder}/
  sqsQueueName: ${self:custom.stage}-${self:service}-sqs.fifo
  sqsQueueDLName: ${self:custom.stage}-${self:service}-sqs-dl.fifo
  pythonRequirements:
    dockerizePip: non-linux
    noDeploy:
      - boto3
      - botocore

provider:
  name: aws
  stage: dev
  region: eu-central-1
  stackName: ${self:custom.stage}-${self:service}
  deploymentBucket:
    name: ${self:custom.stage}-${file(../../infrastructure/deploymentBucket/config.yml):bucketName, file(../../infrastructure/deploymentBucket/serverless.yml):defaultBucketName}
  runtime: python3.7
  memorySize: 1024
  timeout: ${self:custom.editable.timeout}
  tags:
    Project: Dataplattform
    Layer: Ingestion
    Ingestion: Pollers
  stackTags:
  environment:

package:
  individually: true
  exclude:
    - "./**"

functions:
  ingest:
    handler: ${self:custom.editable.handlerFile}.handler
    name: ${self:custom.stage}-${self:service}-ingest
    description: ${self:custom.editable.description}
    role: !GetAtt IngestLambdaRole.Arn
    package:
      include:
        - '*.py'
    environment:
      STAGE: ${self:custom.stage}
      SERVICE: ${self:service}
      DATALAKE: !Sub '${self:custom.stage}-encryptedbucket-${AWS::AccountId}'
      ACCESS_PATH: ${self:custom.accessPath}
      DEFAULT_DATABASE: ${self:custom.editable.databaseName}
      SQS_QUEUE_NAME: ${self:custom.sqsQueueName}
      SQS_MESSAGE_GROUP_ID: ${self:custom.sqsQueueName}-group1
    tags:
    events:
      - schedule:
          name: ${self:custom.stage}-${self:service}-timer
          description: ${self:custom.editable.description}
          rate: ${self:custom.editable.scheduleRate}
          enabled: true
  process:
    handler: ${self:custom.editable.processHandlerFile}.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - EventQueue
              - Arn
          batchSize: 1
    name: ${self:custom.stage}-${self:service}-process
    description: ${self:custom.editable.description}
    role: !GetAtt ProcessLambdaRole.Arn
    package:
      include:
        - '*.py'
    environment:
      STAGE: ${self:custom.stage}
      SERVICE: ${self:service}
      DATALAKE: !Sub '${self:custom.stage}-encryptedbucket-${AWS::AccountId}'
      ACCESS_PATH: ${self:custom.accessPath}
      DEFAULT_DATABASE: ${self:custom.editable.databaseName}
      DATA_UPDATE_TOPIC: !ImportValue ${self:custom.stage}-data-update-topic-arn
      ACCESS_LEVEL: ${self:custom.editable.accessLevel}
      PERSON_DATA_TABLE: !ImportValue ${self:custom.stage}-personal-metadata-table-name
    tags:

resources:
  Resources:
    DoraCrawlerRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "glue.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${self:custom.stage}-Glue-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'glue:GetTable'
                    - 'glue:GetDatabase'
                    - 'glue:CreateDatabase'
                    - 'glue:CreateTable'
                    - 'glue:UpdateTable'
                    - 'glue:UpdatePartition'
                    - 'glue:BatchGetPartition'
                    - 'glue:BatchCreatePartition'
                  Resource:
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:catalog'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:database/${self:custom.stage}_${self:custom.editable.databaseName}_database'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.stage}_${self:custom.editable.databaseName}_database/*'
          - PolicyName: ${self:custom.stage}-Logs-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource:
                    - !Sub 'arn:aws:logs:*:*:/aws-glue/*'
          - PolicyName: ${self:custom.stage}-EncryptedBucketIO-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListObjects*
                    - s3:ListBucket
                    - s3:GetObject
                    - s3:CopyObject
                    - s3:PutObject
                  Resource: 
                    - !Sub arn:aws:s3:::${self:custom.stage}-encryptedbucket-${AWS::AccountId}
                    - !Sub arn:aws:s3:::${self:custom.stage}-encryptedbucket-${AWS::AccountId}/*
          - PolicyName: ${self:custom.stage}-EncryptedBucketKMS-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - kms:Encrypt
                    - kms:Decrypt
                    - kms:DescribeKey
                    - kms:ListKeys
                    - kms:GenerateDataKey 
                  Resource:  !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/b458b436-f666-43f5-a746-39152d820137' #Må fikses slik at vi får automatisk hentet id etter key/
    GlueCrawler:
      Type: AWS::Glue::Crawler
      Properties:
        Name: "DoraCrawler"
        Role: !GetAtt DoraCrawlerRole.Arn
        DatabaseName: dev_level_4_database
        Targets:
          S3Targets:
            - Path: !Sub '${self:custom.stage}-encryptedbucket-${AWS::AccountId}/data/level-4/dora/structured/github_dora_repos'
              Exclusions:
              - "*_metadata**"
        SchemaChangePolicy:
          UpdateBehavior: "UPDATE_IN_DATABASE"
          DeleteBehavior: "DEPRECATE_IN_DATABASE"
        Schedule:
          ScheduleExpression: "cron(45 16 ? * MON-FRI *)"
    KMSTestKey:
      Type: AWS::KMS::Key
      Properties:
        Description: An example symmetric KMS key
        EnableKeyRotation: true
        PendingWindowInDays: 20
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::876363704293:user/ #Sett inn bruker
            Action:
            - kms:Create*
            - kms:Describe*
            - kms:Enable*
            - kms:List*
            - kms:Put*
            - kms:Update*
            - kms:Revoke*
            - kms:Disable*
            - kms:Get*
            - kms:Delete*
            - kms:ScheduleKeyDeletion
            - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::876363704293:user/ #Sett inn bruker
            Action:
            - kms:DescribeKey
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey
            - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
    KeyAlias:
      Type: 'AWS::KMS::Alias'
      Properties:
        AliasName: alias/KMSTestName
        TargetKeyId: !Ref KMSTestKey
    EncryptedS3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: !Sub '${self:custom.stage}-encryptedbucket-${AWS::AccountId}'
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: 'aws:kms'
                KMSMasterKeyID: !Ref KMSTestKey
              BucketKeyEnabled: true
      DeletionPolicy: Delete
    IngestLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-ingest-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: ${self:custom.stage}-EncryptedBucketIO-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:ListObjects*
                    - s3:GetObject
                    - s3:CopyObject
                    - s3:DeleteObjects
                    - s3:DeleteObjectVersion
                  Resource: 
                    - !Sub arn:aws:s3:::${self:custom.stage}-encryptedbucket-${AWS::AccountId}
                    - !Sub arn:aws:s3:::${self:custom.stage}-encryptedbucket-${AWS::AccountId}/*
          - PolicyName: ${self:custom.stage}-EncryptedBucketKMS-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - kms:Encrypt
                    - kms:Decrypt
                    - kms:DescribeKey
                    - kms:ListKeys
                    - kms:GenerateDataKey 
                  Resource:  !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/b458b436-f666-43f5-a746-39152d820137' #Må fikses slik at vi får automatisk hentet id etter key/
          - PolicyName: ${self:custom.stage}-EncryptedBucketIO-${self:service}-List
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:ListBucketVersions
                    - s3:GetBucketLocation
                  Resource: 
                    - !Sub arn:aws:s3:::${self:custom.stage}-encryptedbucket-${AWS::AccountId}
                    - !Sub arn:aws:s3:::${self:custom.stage}-encryptedbucket-${AWS::AccountId}/*
          - PolicyName: ${self:custom.stage}-${self:service}-ingest-sqsRole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:GetQueueUrl
                    - sqs:SendMessageBatch
                    - sqs:SendMessage
                  Resource: !GetAtt EventQueue.Arn
          - PolicyName: ${self:custom.stage}-ParameterStore-${self:service}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'ssm:GetParameter*'
                  Resource: !Sub 'arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.stage}/${self:service}/*'
    ProcessLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-process-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"
          - !ImportValue ${self:custom.stage}-process-lambda-topic-access-role
          - !ImportValue "${self:custom.stage}-personal-metadata-table-access-policy"
        Policies:
          - PolicyName: ${self:custom.stage}-Glue-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'glue:GetTable'
                    - 'glue:GetDatabase'
                  Resource:
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:catalog'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:database/${self:custom.stage}_${self:custom.editable.databaseName}_database'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.stage}_${self:custom.editable.databaseName}_database/*'
          - PolicyName: ${self:custom.stage}-Athena-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'athena:StartQueryExecution'
                    - 'athena:GetQueryExecution'
                    - 'athena:GetQueryResults'
                  Resource:
                    !Sub 'arn:aws:athena:#{AWS::Region}:#{AWS::AccountId}:workgroup/primary'
          - PolicyName: ${self:custom.stage}-DatalakeIO-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:ListObjects*
                    - s3:GetObject
                    - s3:CopyObject
                    - s3:DeleteObjects
                    - s3:DeleteObjectVersion
                    - s3:DeleteObject
                  Resource:
                    - !Sub arn:aws:s3:::${self:custom.stage}-encryptedbucket-${AWS::AccountId}
                    - !Sub arn:aws:s3:::${self:custom.stage}-encryptedbucket-${AWS::AccountId}*
          - PolicyName: ${self:custom.stage}-DatalakeBucket-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:ListBucketVersions
                    - s3:GetBucketLocation
                  Resource:
                    - !Sub arn:aws:s3:::${self:custom.stage}-encryptedbucket-${AWS::AccountId}
                    - !Sub arn:aws:s3:::${self:custom.stage}-encryptedbucket-${AWS::AccountId}*
          - PolicyName: ${self:custom.stage}-EncryptedBucketKMS-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - kms:Encrypt
                    - kms:Decrypt
                    - kms:DescribeKey
                    - kms:ListKeys
                    - kms:GenerateDataKey 
                  Resource:  !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/b458b436-f666-43f5-a746-39152d820137' #Må fikses slik at vi får automatisk hentet id etter key/
          - PolicyName: ${self:custom.stage}-glue-${self:service}-role
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - glue:GetCrawler
                    - glue:UpdateCrawler
                  Resource:
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:catalog'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:database/${self:custom.stage}_*'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.stage}_*'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:crawler/${self:custom.stage}_*'

    EventQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:custom.sqsQueueName}
        ContentBasedDeduplication: true
        VisibilityTimeout: ${self:custom.editable.timeout}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt EventQueueDL.Arn
          maxReceiveCount: 1

    EventQueueDL:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:custom.sqsQueueDLName}
        ContentBasedDeduplication: true


plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters