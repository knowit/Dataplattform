service: dora

dataplattform:
  dependencies:
    - ../../infrastructure/deploymentBucket
    - ../../infrastructure/datalake
    - ../../infrastructure/events
    - ../../infrastructure/monitoring
    - ../../infrastructure/glue
  glue:
    tableName: dora
    accessLevel: 4

custom:
  editable:
    timeout: 200
    handlerFile: dora_ingestion_handler
    processHandlerFile: dora_process_handler
    databaseName: level_4
    description: Fetch key metrics from github API
    scheduleRate: rate(1 day)
    accessLevel: level-4
    dataFolder: dora

  stage: ${opt:stage, self:provider.stage}
  accessPath: data/${self:custom.editable.accessLevel}/${self:custom.editable.dataFolder}/
  sqsQueueName: ${self:custom.stage}-${self:service}-sqs.fifo
  sqsQueueDLName: ${self:custom.stage}-${self:service}-sqs-dl.fifo
  pythonRequirements:
    dockerizePip: non-linux
    noDeploy:
      - boto3
      - botocore

provider:
  name: aws
  stage: dev
  region: eu-central-1
  stackName: ${self:custom.stage}-${self:service}
  deploymentBucket:
    name: ${self:custom.stage}-${file(../../infrastructure/deploymentBucket/config.yml):bucketName, file(../../infrastructure/deploymentBucket/serverless.yml):defaultBucketName}
  runtime: python3.7
  memorySize: 1024
  timeout: ${self:custom.editable.timeout}
  tags:
    Project: Dataplattform
    Layer: Ingestion
    Ingestion: Pollers
  stackTags:
  environment:

package:
  individually: true
  exclude:
    - "./**"

functions:
  ingest:
    handler: ${self:custom.editable.handlerFile}.handler
    name: ${self:custom.stage}-${self:service}-ingest
    description: ${self:custom.editable.description}
    role: !GetAtt IngestLambdaRole.Arn
    package:
      include:
        - '*.py'
    environment:
      STAGE: ${self:custom.stage}
      SERVICE: ${self:service}
      DATALAKE: !Sub '${self:custom.stage}-kmsbucket-${AWS::AccountId}'
      ACCESS_PATH: ${self:custom.accessPath}
      DEFAULT_DATABASE: ${self:custom.editable.databaseName}
      SQS_QUEUE_NAME: ${self:custom.sqsQueueName}
      SQS_MESSAGE_GROUP_ID: ${self:custom.sqsQueueName}-group1
    tags:
    events:
      - schedule:
          name: ${self:custom.stage}-${self:service}-timer
          description: ${self:custom.editable.description}
          rate: ${self:custom.editable.scheduleRate}
          enabled: true
  process:
    handler: ${self:custom.editable.processHandlerFile}.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - EventQueue
              - Arn
          batchSize: 1
    name: ${self:custom.stage}-${self:service}-process
    description: ${self:custom.editable.description}
    role: !GetAtt ProcessLambdaRole.Arn
    package:
      include:
        - '*.py'
    environment:
      STAGE: ${self:custom.stage}
      SERVICE: ${self:service}
      DATALAKE: !Sub '${self:custom.stage}-kmsbucket-${AWS::AccountId}'
      ACCESS_PATH: ${self:custom.accessPath}
      DEFAULT_DATABASE: ${self:custom.editable.databaseName}
      DATA_UPDATE_TOPIC: !ImportValue ${self:custom.stage}-data-update-topic-arn
      ACCESS_LEVEL: ${self:custom.editable.accessLevel}
      PERSON_DATA_TABLE: !ImportValue ${self:custom.stage}-personal-metadata-table-name
    tags:

resources:
  Resources:
    DoraCrawlerRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "glue.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${self:custom.stage}-Glue-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'glue:GetTable'
                    - 'glue:GetDatabase'
                    - 'glue:CreateDatabase'
                    - 'glue:CreateTable'
                    - 'glue:UpdateTable'
                    - 'glue:UpdatePartition'
                    - 'glue:BatchGetPartition'
                    - 'glue:BatchCreatePartition'
                  Resource:
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:catalog'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:database/${self:custom.stage}_${self:custom.editable.databaseName}_database'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.stage}_${self:custom.editable.databaseName}_database/*'
          - PolicyName: ${self:custom.stage}-GlueSecurity-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'glue:GetDataCatalogEncryptionSettings'
                    - 'glue:PutDataCatalogEncryptionSettings'
                    - 'glue:CreateSecurityConfiguration'
                    - 'glue:GetSecurityConfiguration'
                    - 'glue:GetSecurityConfigurations'
                    - 'glue:DeleteSecurityConfiguration'
                  Resource: '*'
          - PolicyName: ${self:custom.stage}-Logs-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                    - 'logs:AssociateKmsKey'
                  Resource:
                    - !Sub 'arn:aws:logs:*:*:/aws-glue/*'
          - PolicyName: ${self:custom.stage}-EncryptedBucketIO-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListObjects*
                    - s3:ListBucket
                    - s3:GetObject
                    - s3:CopyObject
                    - s3:PutObject
                  Resource: 
                    - !Sub arn:aws:s3:::${self:custom.stage}-kmsbucket-${AWS::AccountId}
                    - !Sub arn:aws:s3:::${self:custom.stage}-kmsbucket-${AWS::AccountId}/*
          - PolicyName: ${self:custom.stage}-EncryptedBucketKMS-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - kms:Encrypt
                    - kms:Decrypt
                    - kms:DescribeKey
                    - kms:ListKeys
                    - kms:GenerateDataKey 
                  Resource:
                    - Fn::Join:
                      - ""
                      - - "arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:key/"
                        - !ImportValue ${self:custom.stage}-KMS-KeyID
    CrawlerLogGroup:
      Type: AWS::Logs::LogGroup
      Properties: 
        KmsKeyId: arn:aws:kms:eu-central-1:876363704293:key/db670100-7eb7-4af9-a9cd-88d97044c4fd
        LogGroupName: /aws-glue/crawlers-role/dev-dora-DoraCrawlerRole-ZB0338V5YQCF-KMSGlueEncryptionConfigurations
    GlueEncryptionConfiguration:
      Type: AWS::Glue::SecurityConfiguration
      Properties:
        Name: KMSGlueEncryptionConfigurations
        EncryptionConfiguration:
          CloudWatchEncryption:
            CloudWatchEncryptionMode: SSE-KMS
            KmsKeyArn: 
              Fn::Join:
                - ""
                - - "arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:key/"
                  - !ImportValue ${self:custom.stage}-KMS-KeyID
          JobBookmarksEncryption:
            JobBookmarksEncryptionMode: CSE-KMS
            KmsKeyArn: 
              Fn::Join:
                - ""
                - - "arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:key/"
                  - !ImportValue ${self:custom.stage}-KMS-KeyID
          S3Encryptions:
            - KmsKeyArn: 
                Fn::Join:
                  - ""
                  - - "arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:key/"
                    - !ImportValue ${self:custom.stage}-KMS-KeyID
              S3EncryptionMode: SSE-KMS
    GlueCrawler:
      Type: AWS::Glue::Crawler
      Properties:
        Name: "DoraCrawler"
        CrawlerSecurityConfiguration: !Ref GlueEncryptionConfiguration
        Role: !GetAtt DoraCrawlerRole.Arn
        DatabaseName: dev_level_4_database
        Targets:
          S3Targets:
            - Path: !Sub '${self:custom.stage}-kmsbucket-${AWS::AccountId}/data/level-4/dora/structured/github_dora_repos'
              Exclusions:
              - "*_metadata**"
        SchemaChangePolicy:
          UpdateBehavior: "UPDATE_IN_DATABASE"
          DeleteBehavior: "DEPRECATE_IN_DATABASE"
        Schedule:
          ScheduleExpression: "cron(45 16 ? * MON-FRI *)"
    IngestLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-ingest-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: ${self:custom.stage}-EncryptedBucketIO-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:ListObjects*
                    - s3:GetObject
                    - s3:CopyObject
                    - s3:DeleteObjects
                    - s3:DeleteObjectVersion
                  Resource: 
                    - !Sub arn:aws:s3:::${self:custom.stage}-kmsbucket-${AWS::AccountId}
                    - !Sub arn:aws:s3:::${self:custom.stage}-kmsbucket-${AWS::AccountId}/*
          - PolicyName: ${self:custom.stage}-EncryptedBucketKMS-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - kms:Encrypt
                    - kms:Decrypt
                    - kms:DescribeKey
                    - kms:ListKeys
                    - kms:GenerateDataKey 
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:key/"
                        - !ImportValue ${self:custom.stage}-KMS-KeyID
          - PolicyName: ${self:custom.stage}-EncryptedBucketIO-${self:service}-List
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:ListBucketVersions
                    - s3:GetBucketLocation
                  Resource: 
                    - !Sub arn:aws:s3:::${self:custom.stage}-kmsbucket-${AWS::AccountId}
                    - !Sub arn:aws:s3:::${self:custom.stage}-kmsbucket-${AWS::AccountId}/*
          - PolicyName: ${self:custom.stage}-${self:service}-ingest-sqsRole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:GetQueueUrl
                    - sqs:SendMessageBatch
                    - sqs:SendMessage
                  Resource: !GetAtt EventQueue.Arn
          - PolicyName: ${self:custom.stage}-ParameterStore-${self:service}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'ssm:GetParameter*'
                  Resource: !Sub 'arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.stage}/${self:service}/*'
    ProcessLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-${self:service}-process-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"
          - !ImportValue ${self:custom.stage}-process-lambda-topic-access-role
          - !ImportValue "${self:custom.stage}-personal-metadata-table-access-policy"
        Policies:
          - PolicyName: ${self:custom.stage}-Glue-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'glue:GetTable'
                    - 'glue:GetDatabase'
                  Resource:
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:catalog'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:database/${self:custom.stage}_${self:custom.editable.databaseName}_database'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.stage}_${self:custom.editable.databaseName}_database/*'
          - PolicyName: ${self:custom.stage}-Athena-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - 'athena:StartQueryExecution'
                    - 'athena:GetQueryExecution'
                    - 'athena:GetQueryResults'
                  Resource:
                    !Sub 'arn:aws:athena:#{AWS::Region}:#{AWS::AccountId}:workgroup/primary'
          - PolicyName: ${self:custom.stage}-DatalakeIO-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:ListObjects*
                    - s3:GetObject
                    - s3:CopyObject
                    - s3:DeleteObjects
                    - s3:DeleteObjectVersion
                    - s3:DeleteObject
                  Resource:
                    - !Sub arn:aws:s3:::${self:custom.stage}-kmsbucket-${AWS::AccountId}
                    - !Sub arn:aws:s3:::${self:custom.stage}-kmsbucket-${AWS::AccountId}*
          - PolicyName: ${self:custom.stage}-DatalakeBucket-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:ListBucketVersions
                    - s3:GetBucketLocation
                  Resource:
                    - !Sub arn:aws:s3:::${self:custom.stage}-kmsbucket-${AWS::AccountId}
                    - !Sub arn:aws:s3:::${self:custom.stage}-kmsbucket-${AWS::AccountId}*
          - PolicyName: ${self:custom.stage}-EncryptedBucketKMS-${self:service}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - kms:Encrypt
                    - kms:Decrypt
                    - kms:DescribeKey
                    - kms:ListKeys
                    - kms:GenerateDataKey 
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:key/"
                        - !ImportValue ${self:custom.stage}-KMS-KeyID 
          - PolicyName: ${self:custom.stage}-glue-${self:service}-role
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - glue:GetCrawler
                    - glue:UpdateCrawler
                  Resource:
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:catalog'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:database/${self:custom.stage}_*'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.stage}_*'
                    - !Sub 'arn:aws:glue:#{AWS::Region}:#{AWS::AccountId}:crawler/${self:custom.stage}_*'

    EventQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:custom.sqsQueueName}
        ContentBasedDeduplication: true
        VisibilityTimeout: ${self:custom.editable.timeout}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt EventQueueDL.Arn
          maxReceiveCount: 1

    EventQueueDL:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:custom.sqsQueueDLName}
        ContentBasedDeduplication: true


plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters