/* Table to create a list of deployments per merged date. */
CREATE TABLE dev_level_2_database.github_deployments
WITH (
  format='PARQUET'
) AS
SELECT
COUNT(distinct id) AS deployments,
Date(from_unixtime(merged_at)) as Date
FROM
github_dora_repos
group by Date(from_unixtime(merged_at));


/* Table to create a list of all deployments per merged date, with null values on all empty dates */
CREATE TABLE dev_level_2_database.github_deployments_null_values
WITH (
  format='PARQUET'
) AS
with all_dates as (
SELECT
     CAST(date_column AS DATE) date_column
 FROM
     (VALUES
         (SEQUENCE(date(date_add('month',-3,current_date)),
                   date(current_date),
                   INTERVAL '1' DAY)
         )
     ) AS t1(date_array)
 CROSS JOIN
     UNNEST(date_array) AS t2(date_column)
)

select
   date_column,
   sum(val) as deployments
from
   (
      select
         date_list as date_column,
         deployments as val
      from
         github_deployments
   union
      select
         date_column,
         0
      from
         all_dates
      where
         date_column >= date_add('month',-3,current_date) and
         date_column <= current_date
   )
group by
   date_column
order by
   date_column


/* Query to check for daily, weekly, monthly or yearly deployment frequency, needs to be expanded to inclue daily and weekly */
with daily_values as(
SELECT
   date_column,
   COUNT(CASE WHEN deployments >0 then 1 end) as deployments
from github_deployments_null_values 
group by date_column
),
daily_aggregate_values as(
SELECT 
  WEEK(date_column) as week,
  COUNT(CASE WHEN deployments >0 then 1 end) as daily_deployments
  from daily_values
  group by WEEK(date_column)
),
monthly_values as(
select 
   MONTH(date_column) AS MONTH,
   COUNT(CASE WHEN deployments >0 then 1 end) as deployments
from github_deployments_null_values 
GROUP by MONTH(date_column)
),
monthly_distinct_values as(
SELECT 
   MONTH,
   COUNT(CASE WHEN deployments >0 then 1 end) as monthly_deployments
from monthly_values
group by MONTH
),
weekly_table as(
Select CASE
   when approx_percentile(daily_deployments,0.5) >= 3 then 'daily'
   when approx_percentile(daily_deployments,0.5) >= 1 then 'weekly'
   end as DeploymentFrequency
from daily_aggregate_values
),
monthly_table as(
Select CASE
  when approx_percentile(monthly_deployments,0.5) >= 1 then 'monthly'
  else 'yearly'
  end as DeploymentFrequency
from monthly_distinct_values
),
aggregate_table as(
  SELECT * from monthly_table union select * from weekly_table
)
SELECT CASE
   when exists(
     SELECT * FROM aggregate_table
     WHERE DeploymentFrequency = 'daily'
     )
     then 'daily'
   when exists(
     SELECT * FROM aggregate_table
     WHERE DeploymentFrequency = 'weekly'
     )
     then 'weekly'
   when exists(
     SELECT * FROM aggregate_table
     WHERE DeploymentFrequency = 'monthly'
     )
     then 'monthly'
   when exists(
     SELECT * FROM aggregate_table
     WHERE DeploymentFrequency = 'yearly'
     )
     then 'yearly'
   end as DeploymentFrequency