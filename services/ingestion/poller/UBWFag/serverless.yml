# More documentation here: https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: ubw-fagtime-poller

custom:
  #Edit these variables###########################
  editable:
    timeout: 6
    handlerFile: ubw_fag
    description: poll fagtimer from ubw
    folder: UBWFag
    scheduleRate: rate(7 days)
    accessLevel: level-2
    dataFolder: ubw_fag
  ################################################
  stage: ${opt:stage, self:provider.stage} #define stage here to include opt:stage, if stage option is passed in with sls deploy
  accessPath: data/${self:custom.editable.accessLevel}/${self:custom.editable.dataFolder}/
  pythonRequirements:
    dockerizePip: 'non-linux'

provider:
  name: aws
  stage: dev
  region: eu-central-1
  stackName: ${self:custom.stage}-${self:service}
  deploymentBucket:
    name: dataplattform-v2-deploymentbucket # Name of s3 bucket
  runtime: python3.7
  memorySize: 1024 # MB
  timeout: ${self:custom.editable.timeout} # seconds
  tags: # Tags that will be added to each of the deployment resources.
    Project: Dataplattform # When used for sub-projects like eventBox change project tag to eventBox
    Layer: Ingestion # ingestion, processing, restApi, infrastructure
    Ingestion: Pollers #webHooks, Pollers, iot
    #processing: linkedIn
    #restApi: linkedIn
    #infrastructure: s3
    # key: value
  stackTags: # Tags for cloud formation
    # key: value
  environment: # Service wide environment variables
    #ENVIRONMENT_VARIABLE_NAME: 123456789

package:
  individually: true
  exclude:
    - "./**" # Exclude everything and include what you need in the functions below

functions:
  eventPoller:
    module: src/${self:custom.editable.folder} # path to function
    handler: ${self:custom.editable.handlerFile}.handler # fileName.functionNameInFile
    name: ${self:custom.stage}-${self:custom.editable.handlerFile} # Always begin name with stage
    description: ${self:custom.editable.description}
    role: !GetAtt S3Access.Arn
    package:
      include:
        - 'src/${self:custom.editable.folder}/*.py' # Files to include in deployment
    environment: # Environment variables, often stored in SSM
      STAGE: ${self:custom.stage}
      SERVICE: ${self:service}
      DATALAKE: !ImportValue ${self:custom.stage}-datalakeName
      ACCESS_PATH: ${self:custom.accessPath}
    tags: # Tag for this function. Every function are tagged with stage by default
    events: # How to trigger the lambda
      - schedule:
          name: ${self:custom.stage}-${self:custom.editable.handlerFile}-timer
          description: ${self:custom.editable.description}
          rate: ${self:custom.editable.scheduleRate}
          enabled: true

resources: # The resources your functions use
  Resources:
    S3Access:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.editable.handlerFile}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        Policies:
          - PolicyName: ${self:custom.stage}-DatalakeWrite-${self:custom.editable.handlerFile}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    #- s3:ListObjects
                  Resource:
                    - Fn::Join:
                      - "" 
                      - - !ImportValue ${self:custom.stage}-datalakeArn
                        - /${self:custom.accessPath}*
          - PolicyName: ${self:custom.stage}-ParameterStore-${self:custom.editable.handlerFile}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'ssm:GetParameter*'
                  Resource: !Sub 'arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.stage}/${self:service}/*' # Only give access to what the lambda needs
  Outputs: # The outputs that your AWS CloudFormation Stack should produce. This allows references between services.

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
